/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Virtual Pandora (https://sketchfab.com/virtualpandora)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hoodie-97611a53e3b846f69e0655b210f72b2f
Title: Hoodie
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { TextureLoader } from "three";

import { useAppSelector } from "@/lib/redux/Hooks";

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh;
    Object_3: THREE.Mesh;
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_7: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_9: THREE.Mesh;
    Object_10: THREE.Mesh;
  };
  materials: {
    BTN_FABRIC_FRONT_1944972: THREE.MeshStandardMaterial;
    Holes_FRONT_1944945: THREE.MeshStandardMaterial;
    Knit_Fleece_Terry_FRONT_1944906: THREE.MeshStandardMaterial;
    Material125269: THREE.MeshStandardMaterial;
    Material2501413: THREE.MeshStandardMaterial;
    Material2501423: THREE.MeshStandardMaterial;
    Rib_wide_FRONT_1944924: THREE.MeshStandardMaterial;
    Straps_FRONT_1944954: THREE.MeshStandardMaterial;
  };
};

export function Hoodie(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("models/hoodie.glb") as GLTFResult;
  const groupRef = useRef<THREE.Group>(null!);
  const imageUrl = useAppSelector((state) => state.image.image);

  useEffect(() => {
    if (imageUrl) {
      const textureLoader = new THREE.TextureLoader();
      const texture = textureLoader.load(imageUrl, () => {
        URL.revokeObjectURL(imageUrl); // Texture yüklendikten sonra URL'yi temizleyin
      });

      const material = materials.Material2501413;
      material.map = texture;
      material.needsUpdate = true; // Material'ı güncelle
    }
  }, [imageUrl, materials.Material2501413]);

  useEffect(() => {
    groupRef.current.traverse((child) => {
      if (!(child instanceof THREE.Mesh)) return;
      child.material.color = new THREE.Color("red");
    });
  });

  return (
    <group {...props} dispose={null} ref={groupRef} scale={[1, 1, 1]}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials.BTN_FABRIC_FRONT_1944972}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials.Holes_FRONT_1944945}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.Knit_Fleece_Terry_FRONT_1944906}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.Knit_Fleece_Terry_FRONT_1944906}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.Material125269}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials.Material2501413}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials.Material2501423}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9.geometry}
          material={materials.Rib_wide_FRONT_1944924}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_10.geometry}
          material={materials.Straps_FRONT_1944954}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/hoodie.glb");
